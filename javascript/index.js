/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */

const { existsSync, readFileSync } = require('fs')
const { join } = require('path')

const { platform, arch } = process

let nativeBinding = null
let localFileExisted = false
let loadError = null

// Detect if we're running on musl (Alpine Linux)
function isMusl() {
  try {
    const ldd = readFileSync('/usr/bin/ldd', 'utf8')
    return ldd.includes('musl')
  } catch {
    try {
      const libc = readFileSync('/lib/libc.musl-' + arch + '.so.1', 'utf8')
      return true
    } catch {
      return false
    }
  }
}

switch (platform) {
  case 'darwin':
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(join(__dirname, 'laserstream-napi.darwin-x64.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./laserstream-napi.darwin-x64.node')
          } else {
            nativeBinding = require('helius-laserstream-darwin-x64')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm64':
        localFileExisted = existsSync(join(__dirname, 'laserstream-napi.darwin-arm64.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./laserstream-napi.darwin-arm64.node')
          } else {
            nativeBinding = require('helius-laserstream-darwin-arm64')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on macOS: ${arch}`)
    }
    break
  case 'linux':
    switch (arch) {
      case 'x64':
        const useMusl = isMusl()
        
        if (useMusl) {
          // For musl systems (Alpine), try musl builds first
          console.log('Alpine Linux detected: Trying musl binaries first')
          
          // Try local musl build
          const localMuslExisted = existsSync(join(__dirname, 'laserstream-napi.linux-x64-musl.node'))
          if (localMuslExisted) {
            try {
              nativeBinding = require('./laserstream-napi.linux-x64-musl.node')
              break
            } catch (e) {
              loadError = e
            }
          }
          
          // Try musl package
          try {
            nativeBinding = require('helius-laserstream-linux-x64-musl')
            break
          } catch (e) {
            loadError = e
          }
          
          // Fallback to glibc with compatibility layer warning
          console.warn('Warning: musl build failed, falling back to glibc. You may need to install glibc compatibility layer for Alpine.')
        }
        
        // Try local glibc build (default for non-musl or fallback)
        localFileExisted = existsSync(join(__dirname, 'laserstream-napi.linux-x64-gnu.node'))
        if (localFileExisted) {
          try {
            nativeBinding = require('./laserstream-napi.linux-x64-gnu.node')
            break
          } catch (e) {
            loadError = e
          }
        }

        // Try glibc package, fallback to musl package
        try {
          nativeBinding = require('helius-laserstream-linux-x64-gnu')
        } catch (e) {
          try {
            nativeBinding = require('helius-laserstream-linux-x64-musl')
          } catch (muslError) {
            loadError = e
          }
        }
        break
      case 'arm64':
        const useMuslArm64 = isMusl()
        
        if (useMuslArm64) {
          // For musl systems (Alpine), try musl builds first
          console.log('Alpine Linux detected: Trying musl binaries first')
          
          // Try local musl build
          const localMuslArm64Existed = existsSync(join(__dirname, 'laserstream-napi.linux-arm64-musl.node'))
          if (localMuslArm64Existed) {
            try {
              nativeBinding = require('./laserstream-napi.linux-arm64-musl.node')
              break
            } catch (e) {
              loadError = e
            }
          }
          
          // Try musl package
          try {
            nativeBinding = require('helius-laserstream-linux-arm64-musl')
            break
          } catch (e) {
            loadError = e
          }
          
          // Fallback to glibc with compatibility layer warning
          console.warn('Warning: musl build failed, falling back to glibc. You may need to install glibc compatibility layer for Alpine.')
        }
        
        // Try local glibc build (default for non-musl or fallback)
        localFileExisted = existsSync(join(__dirname, 'laserstream-napi.linux-arm64-gnu.node'))
        if (localFileExisted) {
          try {
            nativeBinding = require('./laserstream-napi.linux-arm64-gnu.node')
            break
          } catch (e) {
            loadError = e
          }
        }

        // Try glibc package, fallback to musl package
        try {
          nativeBinding = require('helius-laserstream-linux-arm64-gnu')
        } catch (e) {
          try {
            nativeBinding = require('helius-laserstream-linux-arm64-musl')
          } catch (muslError) {
            loadError = e
          }
        }
        break
      default:
        throw new Error(`Unsupported architecture on Linux: ${arch}`)
    }
    break
  default:
    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`)
}

if (!nativeBinding) {
  if (loadError) {
    // Enhanced error message for Alpine/musl compatibility
    if (platform === 'linux' && isMusl()) {
      const muslErrorMessage = `
‚ùå Failed to load native binding on Alpine Linux (musl)

The musl binaries may have glibc dependencies due to build configuration issues.

üí° SOLUTIONS:
1. Install glibc compatibility layer: apk add --no-cache libc6-compat
2. Use a glibc-based Docker image:
   - FROM node:22-slim (Debian-based)
   - FROM node:22 (Debian-based)  
   - FROM ubuntu:22.04 (install Node.js)

Original error: ${loadError.message}
Architecture: ${arch}, Platform: ${platform}
      `.trim()
      
      const error = new Error(muslErrorMessage)
      error.originalError = loadError
      throw error
    }
    throw loadError
  }
  throw new Error(`Failed to load native binding`)
}

const { shutdownAllStreams, getActiveStreamCount, CommitmentLevel, LaserstreamClient, StreamHandle } = nativeBinding

module.exports.shutdownAllStreams = shutdownAllStreams
module.exports.getActiveStreamCount = getActiveStreamCount
module.exports.CommitmentLevel = CommitmentLevel
module.exports.LaserstreamClient = LaserstreamClient
module.exports.StreamHandle = StreamHandle
